# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Spring Boot & Gradle CI/CD

on:
  push:
    branches: [ develop ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
    - uses: actions/checkout@v3

    - name: Create mysql docker container
    - run: |
        - sudo docker run -d -p 3306:3306 -e MYSQL_DATABASE=docswant -e MYSQL_USER=docswant -e MYSQL_PASSWORD=docswant mysql:8.0.23

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
   
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Cache
    - uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hasFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Build with Gradle
      run: ./gradlew clean build
    
    - name: Make Directory for deliver
      run: mkdir deploy

    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy/
      
    - name: Copy appspec.yml
      run: cp ./appspec.yml ./deploy/

    - name: Copy scripts
      run: cp ./scripts/* ./deploy/

    - name: Make zip file
      run: zip -r -qq -j ./springboot-intro-build.zip ./deploy

    - name: Deliver to AWS S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: aws s3 cp --region ap-northeast-2 --acl private ./springboot-intro-build.zip s3://docswant.zooneon.dev
   
    - name: Deploy
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
          aws deploy create-deployment \
          --application-name springboot-intro \
          --deployment-group-name dev \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=docswant.zooneon.dev,bundleType=zip,key=springboot-intro-build.zip \
          --region ap-northeast-2
